version: '3'

services:
  # MySQL database service
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ##use your mysql password
      MYSQL_DATABASE: log_system
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network

  # Zookeeper service (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app_network

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app_network

  # Create Kafka topics
  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
        echo -e 'Waiting for Kafka to be ready...' &&
        cub kafka-ready -b kafka:29092 1 30 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic info-logs &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic warning-logs &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic error-logs
      "
    networks:
      - app_network
    
  # Flask API service
  flask-api:
    build:
      context: .
      dockerfile: Dockerfile.flask
    container_name: flask-api
    ports:
      - "5000:5000"
    networks:
      - app_network
    depends_on:
      - mysql
      - kafka

  # Log generator service
  log-generator:
    build:
      context: .
      dockerfile: Dockerfile.generator
    container_name: log-generator
    networks:
      - app_network
    depends_on:
      - flask-api
      - kafka

  # Kafka consumer service
  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: consumer
    command: python consumer.py info-logs warning-logs error-logs
    networks:
      - app_network
    depends_on:
      - mysql
      - kafka
      - kafka-setup

  # Grafana service
  grafana:
    image: grafana/grafana:9.5.1
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,briangann-gauge-panel,natel-plotly-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - app_network
    depends_on:
      - mysql

networks:
  app_network:
    driver: bridge

volumes:
  mysql_data:
  grafana_data:
